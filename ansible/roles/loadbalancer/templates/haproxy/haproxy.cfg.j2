global
    nbproc  {{ haproxy_nbproc | default('4') }}
    chroot  /usr/share/haproxy
    pidfile /run/haproxy.pid
    maxconn  32768
    ulimit-n 65604
    user    haproxy
    group   haproxy
    # stats sockets
{% for nr in range(1, haproxy_nbproc+1) %}
    stats socket /var/run/haproxy_stats_{{ nr }}.sock level operator process {{ nr}}
{% endfor %}
    daemon
    log     /dev/log local0 notice
    # tls
    ssl-default-bind-options no-sslv3 force-tlsv12
    ssl-default-bind-ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK

defaults
    mode    http
    # enable some usefull options
    option  httplog
    option  dontlognull
    option  http-server-close
    option  abortonclose
    # configure timeouts
    timeout http-request 5s # avoid slowloris
    timeout connect 5s
    timeout server  10s
    timeout client  30s
    # constum error filter
    errorfile 500 /srv/nginx/htdocs/50x.html
    errorfile 502 /srv/nginx/htdocs/50x.html
    errorfile 503 /srv/nginx/htdocs/50x.html
    log     /dev/log local0 notice

frontend icecast_and_nginx_hls_http
    bind-process 1
    bind 0.0.0.0:80
    bind :::80

    # add special header for protocol version
    http-request add-header X-Proto http  if !{ ssl_fc }

{% macro frontend_acls(proto, ssl) -%}
    # tag request for the right destination server
    acl stream_file          path_end   -i .m3u8 .mpd .webm .m4s .ts .jpeg
    acl stream_path          path_dir   -i dash hls thumbnail
    acl is_relive            path_sub   -i index.json thumb.jpg sprites.jpg crossdomain.xml .mp4 relive
    acl icecast              path_end   -i .webm .opus .mp3 .ogg .ogv .oga
    acl is_cdn               hdr_beg(host)  -i cdn.c3voc.de
    acl is_streaming_website hdr_beg(host)  -i streaming.media.ccc.de -i www.stream.c3voc.de
    acl is_streaming_website path_end   -i logo.webm
    acl is_streaming_website path_sub   -i acme-challenge
{% if haproxy_3rdparty_regex is defined %}
    acl is_3rdparty          path_reg   -i {{ haproxy_3rdparty_regex }}
{% endif %}
    # ip address matching
    acl is_local             src        151.217.0.0/16 94.45.224.0/19 2001:67c:20a1::/48 # TODO: update subnetworks
    acl is_dtag              src        -f /etc/haproxy/dtag_subnetworks.txt

    # return 403 if hostname or defined file extensions are not matching
    http-request deny        unless is_cdn or is_streaming_website
    http-request deny        unless stream_file or icecast or is_streaming_website or is_relive

    # Backend usage
    use_backend streaming_website_{{ proto }}   if is_streaming_website {{ ssl }}
    use_backend relive_{{ proto }}              if is_relive {{ ssl }}

{% if haproxy_3rdparty_regex is defined %}
    # 3rd party streams
    use_backend 3rdparty_{{ proto }}    if is_3rdparty stream_path stream_file {{ ssl }}
    use_backend 3rdparty_{{ proto }}    if is_3rdparty icecast {{ ssl }}
{% endif %}

    # local relay
    use_backend local_{{ proto }}       if is_local stream_path stream_file {{ ssl }}
    use_backend local_{{ proto }}       if is_local icecast {{ ssl }}

    # dtag relay
    use_backend dtag_{{ proto }}        if is_dtag stream_path stream_file {{ ssl }}
    use_backend dtag_{{ proto }}        if is_dtag icecast {{ ssl }}

    # use remote relays
    use_backend nginx_{{ proto }}       if stream_path stream_file {{ ssl }}
    use_backend icecast_{{ proto }}     if icecast {{ ssl }}
{%- endmacro %}
    {{ frontend_acls("http", "") }}

frontend icecast_and_nginx_hls_https
    bind-process {{ range(2, haproxy_nbproc+1) | join(' ') }}
    bind 0.0.0.0:443 ssl crt /etc/letsencrypt/live/streaming.media.ccc.de/haproxy.pem crt /etc/letsencrypt/live/cdn.c3voc.de/haproxy.pem # <cert+privkey+intermediate+dhparam>
    bind :::443 ssl crt /etc/letsencrypt/live/streaming.media.ccc.de/haproxy.pem crt /etc/letsencrypt/live/cdn.c3voc.de/haproxy.pem # <cert+privkey+intermediate+dhparam>

    # add special header for protocol version
    http-request add-header X-Proto https if  { ssl_fc }

    {{ frontend_acls("https", "{ ssl_fc }") }}


# enable statistics and basic admin support for localhost
{% for nr in range(1, haproxy_nbproc+1) %}
listen stats_process_{{ nr }}
    bind-process {{ nr }}
    bind 127.0.0.1:910{{ nr }}
    mode http
    stats enable
    stats uri     /admin?stats
    stats refresh 10s
    stats admin   if LOCALHOST

{% endfor %}

# ######## #
# BACKENDs #
# ######## #

{% for protocol in ["http", "https"] %}

# {{ protocol }}
# REMOTE
backend nginx_{{ protocol }}
{% if protocol == "http" %}
    bind-process 1
{% else %}
    bind-process {{ range(2, haproxy_nbproc+1) | join(' ') }}
{% endif %}
    balance source
    option forwardfor
{% for server, weight in lb_dash_relays.items() %}
{% if protocol == "http" %}
    server {{ server }} {{ server }}:80 redir http://{{ server }}:80  weight {{ weight }} check port 80
{% else %}
    server {{ server }} {{ server }}:443 redir https://{{ server }}:443  weight {{ weight }} check port 443
{% endif %}
{% endfor %}

backend relive_{{ protocol }}
{% if protocol == "http" %}
    bind-process 1
{% else %}
    bind-process {{ range(2, haproxy_nbproc+1) | join(' ') }}
{% endif %}
    balance source
    option forwardfor
{% for server, weight in lb_relive_relays.items() %}
{% if protocol == "http" %}
    server {{ server }} {{ server }}:80 redir http://{{ server }}:80  weight {{ weight }} check port 80
{% else %}
    server {{ server }} {{ server }}:443 redir https://{{ server }}:443  weight {{ weight }} check port 443
{% endif %}
{% endfor %}

backend icecast_{{ protocol }}
{% if protocol == "http" %}
    bind-process 1
{% else %}
    bind-process {{ range(2, haproxy_nbproc+1) | join(' ') }}
{% endif %}
    balance source
    option forwardfor
{% for server, weight in lb_icecast_relays.items() %}
{% if protocol == "http" %}
    server {{ server }} {{ server }}:80 redir http://{{ server }}:80  weight {{ weight }} check port 80
{% else %}
    server {{ server }} {{ server }}:443 redir https://{{ server }}:443  weight {{ weight }} check port 443
{% endif %}
{% endfor %}


# 3rd party
backend 3rdparty_{{ protocol }}
{% if protocol == "http" %}
    bind-process 1
{% else %}
    bind-process {{ range(2, haproxy_nbproc+1) | join(' ') }}
{% endif %}
    balance source
    option forwardfor
{% for server, weight in lb_3rdparty_relays.items() %}
{% if protocol == "http" %}
    server {{ server }} {{ server }}:80 redir http://{{ server }}:80  weight {{ weight }} check port 80
{% else %}
    server {{ server }} {{ server }}:443 redir https://{{ server }}:443  weight {{ weight }} check port 443
{% endif %}
{% endfor %}


# LOCAL
backend local_{{ protocol }}
{% if protocol == "http" %}
    bind-process 1
{% else %}
    bind-process {{ range(2, haproxy_nbproc+1) | join(' ') }}
{% endif %}
    balance source
    option forwardfor
{% for server, weight in lb_local_relays.items() %}
{% if protocol == "http" %}
    server {{ server }} {{ server }}:80 redir http://{{ server }}:80  weight {{ weight }} check port 80
{% else %}
    server {{ server }} {{ server }}:443 redir https://{{ server }}:443  weight {{ weight }} check port 443
{% endif %}
{% endfor %}


# DTAG EXTRAWURST
backend dtag_{{ protocol }}
{% if protocol == "http" %}
    bind-process 1
{% else %}
    bind-process {{ range(2, haproxy_nbproc+1) | join(' ') }}
{% endif %}
    balance source
    option forwardfor
{% for server, weight in lb_dtag_relays.items() %}
{% if protocol == "http" %}
    server {{ server }} {{ server }}:80 redir http://{{ server }}:80  weight {{ weight }} check port 80
{% else %}
    server {{ server }} {{ server }}:443 redir https://{{ server }}:443  weight {{ weight }} check port 443
{% endif %}
{% endfor %}


{% endfor %}


# frontend
backend streaming_website_http
    bind-process 1
    balance source
    option forwardfor
    http-request set-header X-Custom-Header %[url]
    http-request set-header X-Real-IP %[src]
    server localhost 127.0.0.1:8080 maxconn 2048

backend streaming_website_https
    bind-process {{ range(2, haproxy_nbproc+1) | join(' ') }}
    balance source
    option forwardfor
    http-request set-header X-Custom-Header %[url]
    http-request set-header X-Real-IP %[src]
    server localhost 127.0.0.1:8080 maxconn 2048
